build path-java Compiler 勾选最上面的框（Enable project specific settings）
@POST
	@Path("/UIGetCallSummaryByMonthRecords")
	@Consumes("application/x-www-form-urlencoded")
	@Produces({MediaType.APPLICATION_JSON})
	public Response UIGetCallSummaryByMonthRecords(
			@Context HttpServletRequest R,
			@FormParam("starttime") RESTDateParam dtStarttime,
			@FormParam("endtime") RESTDateParam dtEndtime,
			@FormParam("groupguid") String sGroupguid,
			@FormParam("agent") String sAgent,
			@FormParam("inside") Integer nInside,
			@FormParam("timeType") Integer nTimeType,
			@FormParam("start") Integer pageStart,
			@FormParam("limit") Integer pageLimit,
			@FormParam("script") String sScript) {
		if (pageStart == null)
			pageStart = 0;
		if (pageLimit == null)
			pageLimit = 1000;
		java.util.Map<String, Object> result = new java.util.HashMap<String, Object>();
		result.put("success", false);
		logger.warn(dtStarttime+""+dtEndtime+"开始时间和结束时间");
		MySession session = getSession(R);
		if (session == null) {
			return Response.status(200).entity(result).build();
		}
		String sWhere = " B.ringtime>=:starttime and B.ringtime<=:endtime";
		String sAgentSQL = "";
		logger.warn(sGroupguid+"==="+sAgent);
		java.util.List<String> AgentList = new java.util.ArrayList<String>();
		if (sAgent != null && sAgent.length() > 0) {
//			AgentList.addAll(Arrays.asList(sAgent));
//			sAgentSQL = " A.agent in (:agent)";
			if (sAgent
					.matches("[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}")) {
				sAgentSQL= "  A.agent in (select userAgent from Rbacusers where userGuid in('"
						+ sAgent + "'))";
				
			} else {
				AgentList.addAll(Arrays.asList(sAgent));
				sAgentSQL= "  A.agent in (:agent)";
			}
			
			
			
			
			
		} else if(sGroupguid != null && sGroupguid.length() > 0){
			String sAgentList = getChildGroupAgentList(session.sUserName,
					session.sSessionId, sGroupguid);
			AgentList.addAll(Arrays.asList(sAgentList.replaceAll("\'", "")
					.split("\\,")));
			//sAgentSQL= " where  A.agent in (:agent) ";
//			sAgentSQL = " where ("
//					+ " A.agent in (:agent) or ("
//					+ " len(A.agent)=0 and ("
//					+ " A.vdn in (select C.device from CallAcdRbacgroups C where C.groupGuid in ('"
//					+ sGroupguid
//					+ "'))"
//					+ " or A.skill in (select C.device from CallAcdRbacgroups C where C.groupGuid in ('"
//					+ sGroupguid + "'))" + ")" + ")" + ")";
			

			sAgentSQL =" ("
					+  " A.agent in (:agent) or ("
					+ " exists(select C.device from CallAcdRbacgroups C where A.vdn=C.device and agent=''"
					+ " and C.groupGuid in ('" + sGroupguid + "')))"
					+ " or (exists(select B.extension from RecPhoneGroup B where "
					+ " A.extension=B.extension and groupguid in('"+ sGroupguid +"')) "
					+ " and A.agent='' ))";

//			sAgentSQL =" and ("
//					+  " A.agent in (:agent) or ("
//					+ " exists(select C.device from CallAcdRbacgroups C where A.vdn=C.device and agent=''"
//					+ " and C.groupGuid in ('B" + sGroupguid + "')))" +")";

			
		} else {
			String sAgentList = getChildGroupAgentList(session.sUserName,
					session.sSessionId, "");
			AgentList.addAll(Arrays.asList(sAgentList.replaceAll("\'", "")
					.split("\\,")));
			String sAgentL = " A.agent in (:agent)";
			String sGroupList = getGroupList_(session.sUserName,
					session.sSessionId);
			sAgentSQL= "("
					+  sAgentL + " or ("
					+ " exists(select C.device from CallAcdRbacgroups C where A.vdn=C.device and agent=''"
					+ " and C.groupGuid in (" + sGroupList + ")))"
					+ " or (A.skill=0 and A.agent='' and A.vdn=''))";
		}
		switch (nInside) {
		case 1:// 内线
//			sWhere += " and  ((len(caller)<5 and len(called)<5) or (len(ani)<5 and len(dnis)<5))"
//						+ " and (type in(4,5,6,7,8,10,12,13,14))";
			
			sWhere+=" and not(( not (len(caller)<5 and len(called)<5) or (caller is null and not(len(ani)<5 and len(dnis)<5))) and ((type in(4,5,6,8,12,13,14) and split>0) or type=7 or type=10)) ";
			sWhere += " and (type in(4,5,6,7,8,10,12,13,14)) ";
			break;
		case 2:// 外线
			sWhere += " and ( not (len(caller)<5 and len(called)<5) or (caller is null and not(len(ani)<5 and len(dnis)<5)))"
			       + " and ((type in(4,5,6,8,12,13,14) and split>0) or type=7 or type=10) ";
			break;
		default:
			sWhere +=" and (type in(4,5,6,7,8,10,12,13,14)) ";
			break;
		}
		String sSelect = "select SUM(case when A.type in(5,6,13) then 1 else 0 end) as nInboundCount,"
				+ "SUM(case when A.type in(0,1,10,2,7) then 1 else 0 end) as nOutboundCount,"
				+ "SUM(case when (A.type in(8,14) or (A.type =13 and A.agent =''))then 1 else 0 end) as nAgentAbandon,";
				//+ "SUM(case when (A.nAni=1 and A.type =12) then 1 else 0 end) as nSkillAbandon,";
		
		if (nTimeType == 0) {
			String starttime=dtStarttime.getDate().toString();
			int stime=Integer.parseInt(starttime.substring(11,13));
			int etime=Integer.parseInt(dtEndtime.getDate().toString().substring(11,13));
			//logger.warn(dtStarttime.getDate()+starttime+"sssfffffffffffffffff"+stime);
			sWhere +=" and  DatePart(HOUR,B.ringtime)>="+stime+ "and DatePart(HOUR,B.ringtime)<="+etime;
			logger.warn(sWhere);
			sSelect+="SUM(case when (A.type =12) then 1 else 0 end) as nSkillAbandon,";
			sSelect += " YEAR(A.ringtime) as nYear,MONTH(A.ringtime) as nMonth,DAY(A.ringtime) as nDay,DatePart(HOUR,A.ringtime) as nHour";
		}else if (nTimeType == 1) {
			sSelect+="SUM(case when (A.nAni=1 and  A.type =12) then 1 else 0 end) as nSkillAbandon,";
			sSelect += " YEAR(A.ringtime) as nYear,MONTH(A.ringtime) as nMonth,DAY(A.ringtime) as nDay";
		}else if (nTimeType == 2) {
			sSelect+="SUM(case when (A.nAni=1 and A.type =12) then 1 else 0 end) as nSkillAbandon,";
			sSelect += " YEAR(A.ringtime) as nYear,MONTH(A.ringtime) as nMonth";
		}
		String sFrom="";
		if (nTimeType == 0) {
		 sFrom = " from (select * from CallDetailRecord B where " + sWhere + ") A";
		}
		if (nTimeType == 1 || nTimeType == 2) {
						 sFrom = " from (select *,ROW_NUMBER() over(partition by ( case when B.type in(7,9,10) then B.dnis else B.ani end),B.type,DAY(B.ringtime),MONTH(B.ringtime) order by DAY(B.ringtime), B.ani) as nAni"
					+ " from CallDetailRecord B where " + sWhere + ") A";
		}
//		if (nTimeType == 2) {
//			 sFrom = " from (select *,ROW_NUMBER() over(partition by B.ani,B.type ,MONTH(B.ringtime) order by B.ani) as nAni"
//					+ " from CallDetailRecord B where " + sWhere + ") A";
//		}
		String sGroupBy = "", sOrderBy = "";
		if (nTimeType == 0) {
			sGroupBy += " group by YEAR(A.ringtime),MONTH(A.ringtime),DAY(A.ringtime),DatePart(HOUR,A.ringtime)";
		} else if (nTimeType == 1) {
			sGroupBy += " group by YEAR(A.ringtime),MONTH(A.ringtime),DAY(A.ringtime)";
		}else if (nTimeType == 2) {
			sGroupBy += " group by YEAR(A.ringtime),MONTH(A.ringtime)";
		}
		if (nTimeType == 0) {
			sOrderBy += " order by nYear,nMonth,nDay,nHour";
		}else if (nTimeType == 1) {
			sOrderBy += " order by nYear,nMonth,nDay";
		}else if (nTimeType == 2) {
			sOrderBy += " order by nYear,nMonth";
		}
		try {
			Session dbsession = HibernateSessionFactory.getThreadSession();
			String sSqlStr = "select sum(Z.nRow) from (select 1 as nRow "
					+ sFrom + " where " + sAgentSQL + sGroupBy + ") Z ";
			
			try {
				String sSqlStr1 = sSelect + sFrom + " where "+ sAgentSQL + sGroupBy + sOrderBy;
				logger.warn(sSqlStr1);
				Query queryCount = dbsession.createSQLQuery(sSqlStr)
						.setTimestamp("starttime", dtStarttime.getDate())
						.setTimestamp("endtime", dtEndtime.getDate());
				if(AgentList.size()>0)queryCount.setParameterList("agent", AgentList);
				@SuppressWarnings("unchecked")
				java.util.List<Object> totalCountList = queryCount.list();
				if (totalCountList.size() > 0) {
					int nTotalCount = Integer.valueOf(totalCountList.get(0).toString());
					if (nTotalCount > 0) {
						Query query = dbsession.createSQLQuery(sSqlStr1)
								.setTimestamp("starttime",dtStarttime.getDate())
								.setTimestamp("endtime", dtEndtime.getDate());
						if(AgentList.size()>0)query.setParameterList("agent", AgentList);
						if (sScript == null || sScript.length() < 0) {
							query.setFirstResult(pageStart).setMaxResults(
									pageLimit);
						}
						@SuppressWarnings("rawtypes")
						java.util.List CallDetailRecordList = query.list();

						List<CallSummaryMonth> calllist = null;
						MyExportExcelFile export = null;

						if (sScript == null || sScript.length() == 0) {
							calllist = new ArrayList<CallSummaryMonth>(
									CallDetailRecordList.size());
						} else {
							export = new MyExportExcelFile();
							if (!export.Init(System.getProperty("tab.path")
									+ System.getProperty("file.separator")
									+ "WebRoot" + sScript)) {
										
								dbsession.close();
								return Response.status(404)
										.entity("FILE NOT FOUND:" + sScript)
										.type("text/plain").build();
							}
						}
						DecimalFormat df = new DecimalFormat("00");
						for (int nIdx = 0; nIdx < CallDetailRecordList.size(); nIdx++) {
							Object[] objs = (Object[]) CallDetailRecordList
									.get(nIdx);
							CallSummaryMonth call = new CallSummaryMonth();
							call.nAnsweredCount = objs[0] == null ? 0 : Integer
									.parseInt(objs[0].toString());
							call.nOutboundCount = objs[1] == null ? 0 : Integer
									.parseInt(objs[1].toString());
							call.nAgentAbandonedCount = objs[2] == null ? 0
									: Integer.parseInt(objs[2].toString());
							call.nSkillAbandonedCount = objs[3] == null ? 0
									: Integer.parseInt(objs[3].toString());
							if (nTimeType == 0) {
								call.sDateTime = objs[4].toString()
										+ "-"
										+ df.format(Integer.parseInt(objs[5]
												.toString()))
										+ "-"
										+ df.format(Integer.parseInt(objs[6]
												.toString()));
								call.sTime = df.format(Integer.parseInt(objs[7]
										.toString()));
							} else if (nTimeType == 1) {
								call.sDateTime = objs[4].toString()
										+ "-"
										+ df.format(Integer.parseInt(objs[5]
												.toString()))
										+ "-"
										+ df.format(Integer.parseInt(objs[6]
												.toString()));
							}else if (nTimeType == 2) {
								call.sDateTime = objs[4].toString()
										+ "-"
										+ df.format(Integer.parseInt(objs[5]
												.toString()));
							}
							if (sScript == null || sScript.length() == 0) {
								calllist.add(call);
							} else {
								export.CommitRow(call);
							}
						}
						if (sScript == null || sScript.length() < 0) {
							result.put("list", calllist);
							result.put("totalCount", nTotalCount);
							result.put("success", true);
						} else {
							String sFileName = export.GetFile();
							if (sFileName != null && sFileName.length() > 0) {
								java.io.File f = new java.io.File(sFileName);
								int pos = sFileName.lastIndexOf(".");
								dbsession.close();
								
								return Response
										.ok(f)
										.header(HttpHeaders.CONTENT_TYPE,"application/csv;charset=UTF-8")
										.header("Content-Disposition",
												"attachment;filename=\""
														+ export.GetFileName()
														+ (new SimpleDateFormat(
																"(yyyy-MM-dd HH:mm:ss)"))
																.format(Calendar
																		.getInstance()
																		.getTime())
																.replaceAll(
																		"\\*|/|\\?|:|>|<|\\\\|\"|\\|",
																		"")
														+ ((pos > 0) ? sFileName
																.substring(pos)
																: "") + "\"")
																.build();
							}
						}

					} else {
						result.put("totalCount", 0);
						result.put("success", true);
					}
				} else {
					result.put("totalCount", 0);
					result.put("success", true);
				}
			} catch (org.hibernate.HibernateException e) {
				logger.warn("ERROR:", e);
				result.put("msg", e.toString());
			} catch (Throwable e) {
				return null;
			}
			if (dbsession.isOpen())
				dbsession.close();
		} catch (org.hibernate.HibernateException e) {
			logger.warn("ERROR:", e);
			result.put("msg", e.toString());
		} catch (Throwable e) {
			logger.warn("ERROR:", e);
			result.put("msg", e.toString());
		}
		if (sScript == null || sScript.length() == 0) {
			return Response.status(200).entity(result).build();
		}
		return Response.status(404).entity("FILE NOT FOUND").type("text/plain")
				.build();
	}